import { Bot } from 'grammy';
import { getAdminKeyboard } from '../keyboards/admin';
import { getMainMenu } from '../keyboards/main';
import type { MyContext } from '../types';
import config from '../config/config';
import { PrismaClient } from '@prisma/client';

export default function setupAdminHandlers(bot: Bot<MyContext>, prisma: PrismaClient) {
    bot.command('admin', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) {
            console.log(`üö® –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç ${ctx.from.id}`);
            return ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        }

        ctx.session.adminMode = true;
        await ctx.reply('üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', {
            reply_markup: getAdminKeyboard()
        });
    });

    bot.hears('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        const appointments = await prisma.client.findMany({
            orderBy: { date: 'desc' },
            take: 10
        });

        if (appointments.length === 0) {
            return ctx.reply('üì≠ –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π');
        }

        let response = 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:\n\n';
        appointments.forEach(app => {
            response += `üÜî ID: ${app.id}\n` +
                `üìÖ ${app.date.toLocaleString('uk-UA')}\n` +
                `üë§ ${app.name} (${app.phone})\n` +
                `üîß –£—Å–ª—É–≥–∞: ${app.service === 'tattoo' ? '–¢–∞—Ç—É' : '–ú–∞–Ω–∏–∫—é—Ä'}\n` +
                `üåê –Ø–∑—ã–∫: ${app.language === 'pl' ? '–ü–æ–ª—å—Å–∫–∏–π' : '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'}\n\n`;
        });

        await ctx.reply(response);
    });

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏...
    bot.hears('–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const todayAppointments = await prisma.client.findMany({
            where: {
                date: { gte: today }
            },
            orderBy: { date: 'asc' }
        });

        if (todayAppointments.length === 0) {
            return ctx.reply('üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π');
        }

        let response = `üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ ${today.toLocaleDateString('uk-UA')}:\n\n`;
        todayAppointments.forEach(app => {
            response += `‚è∞ ${app.date.toLocaleTimeString('uk-UA')}\n` +
                `üë§ ${app.name} (${app.phone})\n` +
                `üîß ${app.service === 'tattoo' ? '–¢–∞—Ç—É' : '–ú–∞–Ω–∏–∫—é—Ä'}\n\n`;
        });

        await ctx.reply(response);
    });

    bot.hears('–í—Å–µ –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        const allAppointments = await prisma.client.findMany({
            orderBy: { date: 'desc' },
            take: 365
        });

        if (allAppointments.length === 0) {
            return ctx.reply('üì≠ –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π');
        }

        let response = 'üìã –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n';
        allAppointments.forEach(app => {
            response += `üÜî ID: ${app.id}\n` +
                `üìÖ ${app.date.toLocaleString('uk-Ua')}\n` +
                `üë§ ${app.name} (${app.phone})\n` +
                `üîß –£—Å–ª—É–≥–∞: ${app.service === 'tattoo' ? '–¢–∞—Ç—É' : '–ú–∞–Ω–∏–∫—é—Ä'}\n` +
                `üåê –Ø–∑—ã–∫: ${app.language === 'pl' ? '–ü–æ–ª—å—Å–∫–∏–π' : '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'}\n\n`;
        });

        await ctx.reply(response);
    });

    bot.hears('–¢–∞—Ç—É –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        const tattooAppointments = await prisma.client.findMany({
            where:{
                service: 'tattoo'
            },
            orderBy: { date: 'desc' },
            take: 14
        });

        if (tattooAppointments.length === 0) {
            return ctx.reply('üì≠ –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π');
        }

        let response = 'üìã –¢–∞—Ç—É –∑–∞–ø–∏—Å–∏:\n\n';
        tattooAppointments.forEach(app => {
            response += `üÜî ID: ${app.id}\n` +
                `üìÖ ${app.date.toLocaleString('uk-Ua')}\n` +
                `üë§ ${app.name} (${app.phone})\n` +
                `üåê –Ø–∑—ã–∫: ${app.language === 'pl' ? '–ü–æ–ª—å—Å–∫–∏–π' : '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'}\n\n`;
        });

        await ctx.reply(response);
    });

    bot.hears('–ú–∞–Ω–∏–∫—é—Ä –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        const manicureAppointments = await prisma.client.findMany({
            where:{
                service: 'manicure'
            },
            orderBy: { date: 'desc' },
            take: 14
        });

        if (manicureAppointments.length === 0) {
            return ctx.reply('üì≠ –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π');
        }

        let response = 'üìã –ú–∞–Ω–∏–∫—é—Ä –∑–∞–ø–∏—Å–∏:\n\n';
        manicureAppointments.forEach(app => {
            response += `üÜî ID: ${app.id}\n` +
                `üìÖ ${app.date.toLocaleString('uk-Ua')}\n` +
                `üë§ ${app.name} (${app.phone})\n` +
                `üåê –Ø–∑—ã–∫: ${app.language === 'pl' ? '–ü–æ–ª—å—Å–∫–∏–π' : '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'}\n\n`;
        });

        await ctx.reply(response);
    });

    bot.hears('–ù–∞–∑–∞–¥', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        ctx.session.adminMode = false;
        await ctx.reply(
            ctx.session.lang === 'ua' ? 'üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ' : 'üîô Wyj≈õcie z panelu admina',
            {
                // –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
                reply_markup: getMainMenu(ctx.session.lang, ctx.session.service ?? 'tattoo')
            }
        );
    });
}