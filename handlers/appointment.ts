import { Bot } from 'grammy';
import { getMainMenu } from '../keyboards/main';
import type { MyContext } from '../types';
import { PrismaClient } from '@prisma/client';


export default function setupAppointmentHandlers(bot: Bot<MyContext>, prisma: PrismaClient) {

    bot.hears(['–ì–∞–ª–µ—Ä–µ—è', 'Galeria'], async (ctx) => {
        try {
            const lang = ctx.session?.lang || 'pl';
            const galleryUrl = "https://telegra.ph/Galereya-shole-07-02";

            await ctx.reply(
                lang === 'ua' ? "üîó –í—ñ–¥–∫—Ä–∏–≤–∞—é –≥–∞–ª–µ—Ä–µ—é..." : "üîó Otwieram galeriƒô...",
                {
                    reply_markup: {
                        keyboard: [
                            [{
                                text: lang === 'ua' ? "üñº –í—ñ–¥–∫—Ä–∏—Ç–∏ –≥–∞–ª–µ—Ä–µ—é" : "üñº Otw√≥rz galeriƒô",
                                web_app: { url: galleryUrl }
                            }]
                        ],
                        resize_keyboard: true
                    },
                    parse_mode: 'HTML'
                }
            );
        } catch (e) {
            console.error('[GALLERY ERROR]:', e);
            const lang = ctx.session?.lang || 'pl';
            await ctx.reply(
                lang === 'ua' ? '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –≥–∞–ª–µ—Ä–µ—ó' : '‚ö†Ô∏è B≈ÇƒÖd otwierania galerii'
            );
        }
    });

    bot.hears(['Um√≥w wizytƒô', '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è'], async (ctx) => {
        const lang = ctx.session.lang || 'pl';
        await ctx.reply(
            lang === 'ua'
                ? "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä: –Ü–≤–∞–Ω +380123456789):"
                : "Podaj imiƒô i telefon (np: Jan +48123456789):"
        );
        ctx.session.waitingForContact = true;
    });

    bot.on('message:text', async (ctx) => {
        if (!ctx.session.waitingForContact) return;

        const lang = ctx.session.lang || 'pl';
        const text = ctx.message.text;
        const contactRegex = /^[A-Za-z–ê-–Ø–∞-—è—ñ—ó—î“ë\s]+\+\d+$/;

        if (!contactRegex.test(text)) {
            const errorMsg = lang === 'ua'
                ? "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω +380123456789"
                : "Nieprawid≈Çowy format. Przyk≈Çad: Jan +48123456789";
            return ctx.reply(errorMsg);
        }

        const [name, phone] = text.split('+');
        const formattedPhone = `+${phone.trim()}`;

        await prisma.client.create({
            data: {
                name: name.trim(),
                phone: formattedPhone,
                language: ctx.session.lang || 'pl',
                service: ctx.session.service || 'tattoo',
                date: new Date()
            }
        });

        await ctx.reply(
            lang === 'ua' ? "–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏." : "Dziƒôkujemy! Skontaktujemy siƒô wkr√≥tce.",
            { reply_markup: getMainMenu(ctx.session.lang, ctx.session.service ?? 'tattoo') }
        );

        ctx.session.waitingForContact = false;
    });
}