const { Client } = require('../models');
const { getAdminKeyboard, getMainMenu } = require('../keyboards/admin');
const { Op } = require('sequelize');
const config = require('../config/config');

async function setup(bot) {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    bot.command('admin', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) {
            console.log(`üö® –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ –æ—Ç ${ctx.from.id} (${ctx.from.username})`);
            return ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–∞—à ID: ' + ctx.from.id);
        }

        ctx.session.adminMode = true;

        try {
            await ctx.reply('üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', {
                reply_markup: getAdminKeyboard(),
                parse_mode: 'HTML'
            });
            console.log(`üë®‚Äçüíª –ê–¥–º–∏–Ω ${ctx.from.username} –≤–æ—à–µ–ª –≤ –ø–∞–Ω–µ–ª—å`);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', e);
            ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
        }
    });

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    bot.hears('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        try {
            const appointments = await Client.findAll({
                order: [['date', 'DESC']],
                limit: 10
            });

            if (appointments.length === 0) {
                return ctx.reply('üì≠ –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π');
            }

            let response = 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:\n\n';
            appointments.forEach(app => {
                response += `üÜî ID: ${app.id}\n` +
                    `üìÖ ${app.date.toLocaleString('uk-UA')}\n` +
                    `üë§ ${app.name} (${app.phone})\n` +
                    `üîß –£—Å–ª—É–≥–∞: ${app.service === 'tattoo' ? '–¢–∞—Ç—É' : '–ú–∞–Ω–∏–∫—é—Ä'}\n` +
                    `üåê –Ø–∑—ã–∫: ${app.lang === 'pl' ? '–ü–æ–ª—å—Å–∫–∏–π' : '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'}\n\n`;
            });

            await ctx.reply(response);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', e);
            ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π');
        }
    });

    // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    bot.hears('–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        try {
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            const appointments = await Client.findAll({
                where: {
                    date: {
                        [Op.gte]: today
                    }
                },
                order: [['date', 'ASC']]
            });

            if (appointments.length === 0) {
                return ctx.reply('üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π');
            }

            let response = `üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ ${today.toLocaleDateString('uk-UA')}:\n\n`;
            appointments.forEach(app => {
                response += `‚è∞ ${app.date.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' })}\n` +
                    `üë§ ${app.name} (${app.phone})\n` +
                    `üîß ${app.service === 'tattoo' ? '–¢–∞—Ç—É' : '–ú–∞–Ω–∏–∫—é—Ä'}\n\n`;
            });

            await ctx.reply(response);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π:', e);
            ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π');
        }
    });

    bot.hears('–í—Å–µ –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        try {
            const allAppointments = await Client.findAll({
                order: [['date', 'DESC']],
                limit: 365
            });

            if (allAppointments.length === 0) {
                return ctx.reply('üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π');
            }

            let response = 'üìã –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥:\n\n';
            allAppointments.forEach(app => {
                response += `üÜî ID: ${app.id}\n` +
                    `üìÖ ${app.date.toLocaleString('uk-UA')}\n` +
                    `üë§ ${app.name} (${app.phone})\n` +
                    `üîß –£—Å–ª—É–≥–∞: ${app.service === 'tattoo' ? '–¢–∞—Ç—É' : '–ú–∞–Ω–∏–∫—é—Ä'}\n` +
                    `üåê –Ø–∑—ã–∫: ${app.lang === 'pl' ? '–ü–æ–ª—å—Å–∫–∏–π' : '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'}\n\n`;
            });

            await ctx.reply(response);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π:', e);
            ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π');
        }
    });

    bot.hears('–ú–∞–Ω–∏–∫—é—Ä –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        try {
            const manicureApps = await Client.findAll({
                where: {
                    service: 'manicure'
                },
                order: [['date', 'DESC']],
                limit: 10
            });

            if (!manicureApps || manicureApps.length === 0) {
                return ctx.reply('üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞–Ω–∏–∫—é—Ä');
            }

            let response = 'üíÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä:\n\n';
            manicureApps.forEach(app => {
                response +=
                    `üìÖ –î–∞—Ç–∞: ${app.date.toLocaleString('uk-UA')}\n` +
                    `üë§ –ò–º—è: ${app.name}\n` +
                    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${app.phone}\n` +
                    `üåê –Ø–∑—ã–∫: ${app.lang === 'pl' ? '–ü–æ–ª—å—Å–∫–∏–π' : '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'}\n\n`;
            });

            await ctx.reply(response);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞–Ω–∏–∫—é—Ä:', e);
            ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π');
        }
    });

    bot.hears('–¢–∞—Ç—É –∑–∞–ø–∏—Å–∏', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        try {
            const tattooApps = await Client.findAll({
                where: {
                    service: 'tattoo'
                },
                order: [['date', 'DESC']],
                limit: 10
            });

            if (!tattooApps || tattooApps.length === 0) {
                return ctx.reply('üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞–Ω–∏–∫—é—Ä');
            }

            let response = 'üíÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–∞—Ç—É:\n\n';
            tattooApps.forEach(app => {
                response +=
                    `üìÖ –î–∞—Ç–∞: ${app.date.toLocaleString('uk-UA')}\n` +
                    `üë§ –ò–º—è: ${app.name}\n` +
                    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${app.phone}\n` +
                    `üåê –Ø–∑—ã–∫: ${app.lang === 'pl' ? '–ü–æ–ª—å—Å–∫–∏–π' : '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π'}\n\n`;
            });

            await ctx.reply(response);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞–Ω–∏–∫—é—Ä:', e);
            ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    bot.hears('–ù–∞–∑–∞–¥', async (ctx) => {
        if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

        try {
            ctx.session.adminMode = false;
            const lang = ctx.session.lang || 'pl';
            const service = ctx.session.service || 'tattoo';

            await ctx.reply(
                lang === 'ua' ? 'üîô –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ' : 'üîô Wyj≈õcie z panelu admina',
                { reply_markup: getMainMenu(lang, service) }
            );
            console.log(`üëã –ê–¥–º–∏–Ω ${ctx.from.username} –≤—ã—à–µ–ª –∏–∑ –ø–∞–Ω–µ–ª–∏`);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏:', e);
            ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
        }
    });
}

module.exports = { setup };